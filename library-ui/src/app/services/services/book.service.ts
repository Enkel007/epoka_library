/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addBookToFavourites } from '../fn/book/add-book-to-favourites';
import { AddBookToFavourites$Params } from '../fn/book/add-book-to-favourites';
import { approveReturnedBorrowedBook } from '../fn/book/approve-returned-borrowed-book';
import { ApproveReturnedBorrowedBook$Params } from '../fn/book/approve-returned-borrowed-book';
import { BookResponse } from '../models/book-response';
import { borrowBook } from '../fn/book/borrow-book';
import { BorrowBook$Params } from '../fn/book/borrow-book';
import { findAllBooks } from '../fn/book/find-all-books';
import { FindAllBooks$Params } from '../fn/book/find-all-books';
import { findAllBooksByAuthor } from '../fn/book/find-all-books-by-author';
import { FindAllBooksByAuthor$Params } from '../fn/book/find-all-books-by-author';
import { findAllBooksByCategory } from '../fn/book/find-all-books-by-category';
import { FindAllBooksByCategory$Params } from '../fn/book/find-all-books-by-category';
import { findAllBorrowedBooks } from '../fn/book/find-all-borrowed-books';
import { FindAllBorrowedBooks$Params } from '../fn/book/find-all-borrowed-books';
import { findAllReturnedBooks } from '../fn/book/find-all-returned-books';
import { FindAllReturnedBooks$Params } from '../fn/book/find-all-returned-books';
import { findBookById } from '../fn/book/find-book-by-id';
import { FindBookById$Params } from '../fn/book/find-book-by-id';
import { findFavouriteBooksByUser } from '../fn/book/find-favourite-books-by-user';
import { FindFavouriteBooksByUser$Params } from '../fn/book/find-favourite-books-by-user';
import { PageResponseBookResponse } from '../models/page-response-book-response';
import { PageResponseBorrowedBookResponse } from '../models/page-response-borrowed-book-response';
import { removeBookFromFavourites } from '../fn/book/remove-book-from-favourites';
import { RemoveBookFromFavourites$Params } from '../fn/book/remove-book-from-favourites';
import { returnBorrowedBook } from '../fn/book/return-borrowed-book';
import { ReturnBorrowedBook$Params } from '../fn/book/return-borrowed-book';
import { saveBook } from '../fn/book/save-book';
import { SaveBook$Params } from '../fn/book/save-book';
import { updateAvailability } from '../fn/book/update-availability';
import { UpdateAvailability$Params } from '../fn/book/update-availability';
import { uploadBookCoverPicture } from '../fn/book/upload-book-cover-picture';
import { UploadBookCoverPicture$Params } from '../fn/book/upload-book-cover-picture';

@Injectable({ providedIn: 'root' })
export class BookService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllBooks()` */
  static readonly FindAllBooksPath = '/books';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBooks()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBooks$Response(
    params?: FindAllBooks$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<PageResponseBookResponse>> {
    return findAllBooks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBooks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBooks(
    params?: FindAllBooks$Params,
    context?: HttpContext
  ): Observable<PageResponseBookResponse> {
    return this.findAllBooks$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<PageResponseBookResponse>
        ): PageResponseBookResponse => r.body
      )
    );
  }

  /** Path part for operation `saveBook()` */
  static readonly SaveBookPath = '/books';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveBook()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveBook$Response(
    params: SaveBook$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<number>> {
    return saveBook(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveBook$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveBook(params: SaveBook$Params, context?: HttpContext): Observable<number> {
    return this.saveBook$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `addBookToFavourites()` */
  static readonly AddBookToFavouritesPath = '/books/favourites/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addBookToFavourites()` instead.
   *
   * This method doesn't expect any request body.
   */
  addBookToFavourites$Response(
    params: AddBookToFavourites$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<number>> {
    return addBookToFavourites(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addBookToFavourites$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addBookToFavourites(
    params: AddBookToFavourites$Params,
    context?: HttpContext
  ): Observable<number> {
    return this.addBookToFavourites$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `removeBookFromFavourites()` */
  static readonly RemoveBookFromFavouritesPath = '/books/favourites/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeBookFromFavourites()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeBookFromFavourites$Response(
    params: RemoveBookFromFavourites$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<number>> {
    return removeBookFromFavourites(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeBookFromFavourites$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeBookFromFavourites(
    params: RemoveBookFromFavourites$Params,
    context?: HttpContext
  ): Observable<number> {
    return this.removeBookFromFavourites$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadBookCoverPicture()` */
  static readonly UploadBookCoverPicturePath = '/books/cover/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadBookCoverPicture()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadBookCoverPicture$Response(
    params: UploadBookCoverPicture$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<{}>> {
    return uploadBookCoverPicture(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadBookCoverPicture$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadBookCoverPicture(
    params: UploadBookCoverPicture$Params,
    context?: HttpContext
  ): Observable<{}> {
    return this.uploadBookCoverPicture$Response(params, context).pipe(
      map((r: StrictHttpResponse<{}>): {} => r.body)
    );
  }

  /** Path part for operation `borrowBook()` */
  static readonly BorrowBookPath = '/books/borrow/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `borrowBook()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowBook$Response(
    params: BorrowBook$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<number>> {
    return borrowBook(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `borrowBook$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowBook(
    params: BorrowBook$Params,
    context?: HttpContext
  ): Observable<number> {
    return this.borrowBook$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `returnBorrowedBook()` */
  static readonly ReturnBorrowedBookPath = '/books/borrow/return/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `returnBorrowedBook()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBorrowedBook$Response(
    params: ReturnBorrowedBook$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<number>> {
    return returnBorrowedBook(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `returnBorrowedBook$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBorrowedBook(
    params: ReturnBorrowedBook$Params,
    context?: HttpContext
  ): Observable<number> {
    return this.returnBorrowedBook$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `approveReturnedBorrowedBook()` */
  static readonly ApproveReturnedBorrowedBookPath =
    '/books/borrow/return/approve/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approveReturnedBorrowedBook()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnedBorrowedBook$Response(
    params: ApproveReturnedBorrowedBook$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<number>> {
    return approveReturnedBorrowedBook(
      this.http,
      this.rootUrl,
      params,
      context
    );
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approveReturnedBorrowedBook$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnedBorrowedBook(
    params: ApproveReturnedBorrowedBook$Params,
    context?: HttpContext
  ): Observable<number> {
    return this.approveReturnedBorrowedBook$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateAvailability()` */
  static readonly UpdateAvailabilityPath = '/books/available/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAvailability()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateAvailability$Response(
    params: UpdateAvailability$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<number>> {
    return updateAvailability(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAvailability$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateAvailability(
    params: UpdateAvailability$Params,
    context?: HttpContext
  ): Observable<number> {
    return this.updateAvailability$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findBookById()` */
  static readonly FindBookByIdPath = '/books/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findBookById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findBookById$Response(
    params: FindBookById$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<BookResponse>> {
    return findBookById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findBookById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findBookById(
    params: FindBookById$Params,
    context?: HttpContext
  ): Observable<BookResponse> {
    return this.findBookById$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookResponse>): BookResponse => r.body)
    );
  }

  /** Path part for operation `findAllReturnedBooks()` */
  static readonly FindAllReturnedBooksPath = '/books/returned';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllReturnedBooks()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedBooks$Response(
    params?: FindAllReturnedBooks$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<PageResponseBorrowedBookResponse>> {
    return findAllReturnedBooks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllReturnedBooks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedBooks(
    params?: FindAllReturnedBooks$Params,
    context?: HttpContext
  ): Observable<PageResponseBorrowedBookResponse> {
    return this.findAllReturnedBooks$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<PageResponseBorrowedBookResponse>
        ): PageResponseBorrowedBookResponse => r.body
      )
    );
  }

  /** Path part for operation `findFavouriteBooksByUser()` */
  static readonly FindFavouriteBooksByUserPath = '/books/favourites';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findFavouriteBooksByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  findFavouriteBooksByUser$Response(
    params?: FindFavouriteBooksByUser$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<PageResponseBookResponse>> {
    return findFavouriteBooksByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findFavouriteBooksByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findFavouriteBooksByUser(
    params?: FindFavouriteBooksByUser$Params,
    context?: HttpContext
  ): Observable<PageResponseBookResponse> {
    return this.findFavouriteBooksByUser$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<PageResponseBookResponse>
        ): PageResponseBookResponse => r.body
      )
    );
  }

  /** Path part for operation `findAllBooksByCategory()` */
  static readonly FindAllBooksByCategoryPath =
    '/books/category/{category-name}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBooksByCategory()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBooksByCategory$Response(
    params: FindAllBooksByCategory$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<PageResponseBookResponse>> {
    return findAllBooksByCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBooksByCategory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBooksByCategory(
    params: FindAllBooksByCategory$Params,
    context?: HttpContext
  ): Observable<PageResponseBookResponse> {
    return this.findAllBooksByCategory$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<PageResponseBookResponse>
        ): PageResponseBookResponse => r.body
      )
    );
  }

  /** Path part for operation `findAllBorrowedBooks()` */
  static readonly FindAllBorrowedBooksPath = '/books/borrowed';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBorrowedBooks()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedBooks$Response(
    params?: FindAllBorrowedBooks$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<PageResponseBorrowedBookResponse>> {
    return findAllBorrowedBooks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBorrowedBooks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedBooks(
    params?: FindAllBorrowedBooks$Params,
    context?: HttpContext
  ): Observable<PageResponseBorrowedBookResponse> {
    return this.findAllBorrowedBooks$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<PageResponseBorrowedBookResponse>
        ): PageResponseBorrowedBookResponse => r.body
      )
    );
  }

  /** Path part for operation `findAllBooksByAuthor()` */
  static readonly FindAllBooksByAuthorPath = '/books/author/{author-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBooksByAuthor()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBooksByAuthor$Response(
    params: FindAllBooksByAuthor$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<PageResponseBookResponse>> {
    return findAllBooksByAuthor(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBooksByAuthor$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBooksByAuthor(
    params: FindAllBooksByAuthor$Params,
    context?: HttpContext
  ): Observable<PageResponseBookResponse> {
    return this.findAllBooksByAuthor$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<PageResponseBookResponse>
        ): PageResponseBookResponse => r.body
      )
    );
  }

  searchBooks(params: {
    query: string;
    page?: number;
    size?: number;
  }): Observable<PageResponseBookResponse> {
    // Create the URL with query parameters
    let url = `${this.rootUrl}/books/search?query=${encodeURIComponent(
      params.query
    )}`;

    // Add pagination if provided
    if (params.page !== undefined) {
      url += `&page=${params.page}`;
    }
    if (params.size !== undefined) {
      url += `&size=${params.size}`;
    }

    return this.http.get<PageResponseBookResponse>(url);
  }
}
