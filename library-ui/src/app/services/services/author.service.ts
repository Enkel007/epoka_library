/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { associateAuthorWithBook } from '../fn/author/associate-author-with-book';
import { AssociateAuthorWithBook$Params } from '../fn/author/associate-author-with-book';
import { AuthorResponse } from '../models/author-response';
import { findAllAuthors } from '../fn/author/find-all-authors';
import { FindAllAuthors$Params } from '../fn/author/find-all-authors';
import { findAuthorById } from '../fn/author/find-author-by-id';
import { FindAuthorById$Params } from '../fn/author/find-author-by-id';
import { PageResponseAuthorResponse } from '../models/page-response-author-response';
import { saveAuthor } from '../fn/author/save-author';
import { SaveAuthor$Params } from '../fn/author/save-author';

@Injectable({ providedIn: 'root' })
export class AuthorService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllAuthors()` */
  static readonly FindAllAuthorsPath = '/authors';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllAuthors()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllAuthors$Response(params?: FindAllAuthors$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseAuthorResponse>> {
    return findAllAuthors(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllAuthors$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllAuthors(params?: FindAllAuthors$Params, context?: HttpContext): Observable<PageResponseAuthorResponse> {
    return this.findAllAuthors$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseAuthorResponse>): PageResponseAuthorResponse => r.body)
    );
  }

  /** Path part for operation `saveAuthor()` */
  static readonly SaveAuthorPath = '/authors';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveAuthor()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveAuthor$Response(params: SaveAuthor$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveAuthor(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveAuthor$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveAuthor(params: SaveAuthor$Params, context?: HttpContext): Observable<number> {
    return this.saveAuthor$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `associateAuthorWithBook()` */
  static readonly AssociateAuthorWithBookPath = '/authors/{author-id}/books/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `associateAuthorWithBook()` instead.
   *
   * This method doesn't expect any request body.
   */
  associateAuthorWithBook$Response(params: AssociateAuthorWithBook$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return associateAuthorWithBook(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `associateAuthorWithBook$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  associateAuthorWithBook(params: AssociateAuthorWithBook$Params, context?: HttpContext): Observable<void> {
    return this.associateAuthorWithBook$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `findAuthorById()` */
  static readonly FindAuthorByIdPath = '/authors/{author-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAuthorById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAuthorById$Response(params: FindAuthorById$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthorResponse>> {
    return findAuthorById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAuthorById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAuthorById(params: FindAuthorById$Params, context?: HttpContext): Observable<AuthorResponse> {
    return this.findAuthorById$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthorResponse>): AuthorResponse => r.body)
    );
  }

}
